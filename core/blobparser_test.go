package core

import (
	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
)

var _ = Describe("BlobParser", func() {
	Context("Parse blob", func() {
		It("panics on invalid blob size", func() {
			Expect(func() {
				ParseBlob([]byte{0x63, 0x6c})
			}).To(Panic())
		})

		It("panics on invalid blob magic number", func() {
			Expect(func() {
				ParseBlob([]byte{0x63, 0x6c, 0x69, 0xFF})
			}).To(Panic())
		})

		It("splits segments", func() {
			blob := []byte{
				0x63, 0x6c, 0x69, 0x76, // Magic number
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // Version
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, // Salt size
				0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, // Salt
				0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, // data blob
			}

			blobInfo := ParseBlob(blob)
			Expect(blobInfo.Salt).To(Equal(
				[]byte{0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01},
			))
		})
	})

	Context("WriteBlob", func() {
		It("Generates blob", func() {
			blob := BlobInfo{
				Salt: []byte{0x03, 0x04},
				Blob: []byte{0x02, 0x02, 0x02},
			}

			raw := WriteBlob(blob)

			Expect(raw).To(Equal(
				[]byte{
					0x63, 0x6c, 0x69, 0x76,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // Version
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, // Salt size
					0x03, 0x04,
					0x02, 0x02, 0x02,
				},
			))
		})
	})
})
